#   ___  __    ____    __    _  _   ___  ___
#  / __)(  )  ( ___)  /__\  ( \( ) / __)/ __)
# ( (__  )(__  )__)  /(__)\  )  (  \__ \\__ \
#  \___)(____)(____)(__)(__)(_)\_) (___/(___/
# Configuration file. Made with ‚ù§ by frafol.
# For support: discord.io/futuredevelopment

settings:

  # Name of the ScreenShare server where CleanScreenShare have to send players on control.
  server_name: "Control"

  # Disconnect the player from the control server instead of taking it to a fallback server.
  # It can be useful if you use plugins that allow multi lobby fallback (e.g., FallbackServer).
  # NOTE: This function will break CleanScreenShare if you haven't also put it on the server control!
  use_disconnect_instead_of_fallback: false

  # The server name that will be used to send the players at the end of a control.
  # NOTE: if the value use_disconnect_instead_of_fallback is true, this setting will be ignored.
  fallback_server_name: "Hub"

  # This will check if you have been properly connected to the control server,
  # and if not, it will exit the control. If you encounter an error in the console
  # telling you that the server may be offline or crashed,
  # but you are sure that this is active, disable this feature.
  check_for_problems: true

  # This will disable a check that pings the control server before connecting to prevent problems.
  # If you disable ping, the plugin may break if your control server is offline.
  # This can be useful to get past an annoying offline server error given by BungeeCord's incapable ping system
  # (velocity does not have this problem). NOTE: it is not recommended to disable ping.
  disable_ping_check: false

  # Check for plugin updates.
  update_check: true

  # Automatically update the plugin.
  auto_update: true

  # Enables telemetry.
  stats: true

  slog:

    # Enable this if you want to punish the player when it left during a control.
    punish: false

    # Enter your used ban commands, to predict whether the player has been banned or not.
    ban_commands:
      - "tempban"
      - "ban"
      - "ban-ip"
      - "kick"
      - "ipban"
      - "tempipban"

    # Enter the command to be executed by the console when the player disconnects from the server.
    punish_command: "ban %player% Slog under hack control -s"

permissions:

  # You can personalize permissions.
  control: screenshare.control
  info: screenshare.info
  bypass: screenshare.bypass
  reload: screenshare.reload

discord-webhook: # The Discord Integration is an experimental feature, report all problems on our Discord.

  # Find out how to set up your discord bot through the Discord Web Developer Application via this link.
  # https://www.ionos.com/digitalguide/server/know-how/creating-discord-bot/#:~:text=Creating%20your%20own%20Discord%20bot

  # Toggle discord feature.
  enabled: false

  # Your Discord bot's token.
  token: ""

  # Types: WATCHING, PLAYING, STREAMING.
  activity_type: "WATCHING"

  # The Discord bot's activity. You can use %players% to see the amount of players online.
  activity: "%players% online players."

  # To use CleanScreenShare with Discord, enter the ID of the chat where you want messages to be sent.
  channel_id: ""

  # The 'title' of the embed message sent on Discord.
  embed_title: "ScreenShare handler"

mysql:

  # The MySQL database is an experimental feature.
  # It's just to allow compatibility with multiple proxies (e.g. RedisBungee and RedisVelocity)
  # and for saving the /ssinfo command (without MySQL, the command will reset on every reboot).
  enable: false

  # MySQL database connection details.
  host: "127.0.0.1:3306"
  user: "root"
  database: "cleanscreenshare"
  password: "password"
  arguments: "?autoReconnect=true&maxReconnects=10"

# Enjoy.
